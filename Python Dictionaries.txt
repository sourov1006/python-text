						Python Dictionaries	
========================================================================================================================================
Dictionary:-
-----------
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered*, changeable and does not allow duplicates.

	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	print(thisdict)
_________________
Dictionary Items:-
-----------------
Dictionary items are presented in key:value pairs, and can be referred to by using the key name.

	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	print(thisdict["brand"])
__________________
Dictionary Length:-
------------------
To determine how many items a dictionary has, use the len() function:
	print(len(thisdict))

________________
Accessing Items:-
----------------
You can access the items of a dictionary by referring to its key name, inside square brackets:

	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	x = thisdict["model"]


==>>There is also a method called get() that will give you the same result:
	x = thisdict.get("model")

_________
Get Keys:
---------
The keys() method will return a list of all the keys in the dictionary.
	x = thisdict.keys() 

__________
Get Values:-
----------
The values() method will return a list of all the values in the dictionary.
	x = thisdict.values()
__________
Get Items:-
----------
The items() method will return each item in a dictionary, as tuples in a list.
	x = thisdict.items() 

____________________
Check if Key Exists:-
--------------------
To determine if a specified key is present in a dictionary use the in keyword:
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	if "model" in thisdict:
	  print("Yes, 'model' is one of the keys in the thisdict dictionary") 

_____________
Change Values:-
-------------
You can change the value of a specific item by referring to its key name:
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	thisdict["year"] = 2018
__________________
Update Dictionary:-
------------------
The update() method will update the dictionary with the items from the given argument.
The argument must be a dictionary, or an iterable object with key:value pairs.
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	thisdict.update({"year": 2020}) 

_____________
Adding Items:-
-------------
Adding an item to the dictionary is done by using a new index key and assigning a value to it:
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	thisdict["color"] = "red"
	print(thisdict)

__________________
Update Dictionary:
------------------
The update() method will update the dictionary with the items from a given argument. If the item does not exist, the item will be added.
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	thisdict.update({"color": "red"}) 
_______________
Removing Items:
---------------
There are several methods to remove items from a dictionary:
==>>The pop() method removes the item with the specified key name:
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	thisdict.pop("model")
	print(thisdict) 

==>>The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	thisdict.popitem()
	print(thisdict) 

==>>The del keyword removes the item with the specified key name:
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	del thisdict["model"]
	print(thisdict) 
[[[(The del keyword can also delete the dictionary completely)]]]

==>>The clear() method empties the dictionary:
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	thisdict.clear()
	print(thisdict) 

__________________________
Loop Through a Dictionary:
--------------------------
You can loop through a dictionary by using a for loop.
	for x in thisdict:
	  print(x) 

==>>Print all values in the dictionary, one by one:
	for x in thisdict:
	  print(thisdict[x]) 

==>>You can also use the values() method to return values of a dictionary:
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	for x in thisdict.values():
	  print(x)


==>>You can use the keys() method to return the keys of a dictionary:
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	for x in thisdict.keys():
	  print(x)

==>>Loop through both keys and values, by using the items() method:
	for x, y in thisdict.items():
	  print(x, y) 

__________________
Copy a Dictionary:
------------------
You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made in dict1 will automatically also be made in dict2.
There are ways to make a copy, one way is to use the built-in Dictionary method copy().
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	mydict = thisdict.copy()
	print(mydict)


==>>Another way to make a copy is to use the built-in function dict().

	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	mydict = dict(thisdict)
	print(mydict) 
____________________
Nested Dictionaries:
--------------------
A dictionary can contain dictionaries, this is called nested dictionaries.
	myfamily = {
	  "child1" : {
	    "name" : "Emil",
	    "year" : 2004
	  },
	  "child2" : {
	    "name" : "Tobias",
	    "year" : 2007
	  },
	  "child3" : {
	    "name" : "Linus",
	    "year" : 2011
	  }
	} 

__________________
Dictionary Methods:
------------------
==>>Python has a set of built-in methods that you can use on dictionaries.
	Method 		Description
	clear()		Removes all the elements from the dictionary
	copy()		Returns a copy of the dictionary
	fromkeys()	Returns a dictionary with the specified keys and value
	get()		Returns the value of the specified key
	items()		Returns a list containing a tuple for each key value pair
	keys()		Returns a list containing the dictionary's keys
	pop()		Removes the element with the specified key
	popitem()	Removes the last inserted key-value pair
	setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
	update()	Updates the dictionary with the specified key-value pairs
	values()	Returns a list of all the values in the dictionary
























