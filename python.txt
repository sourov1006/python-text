			Python	Text Help
	___________________________________________________
Python Comments:
----------------
Single Line Comment:-
======================
#This is a comment
print("Hello, World!")#This is a comment
_____________________
Multi Line Comments:-
=====================
#This is a comment
#written in
#more than just one line
print("Hello, World!")

Since Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code,
and place your comment inside it:
"""
This is a comment
written in
more than just one line
"""
print("Hello, World!")
_______________________________________________________________________________________________________________________________________________________________________
Python Variable:
----------------
Variable Names:-
================
==>>Legal variable names:
myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John" 
__________________________
==>>Camel Case: myVariableName = "John"
__________________________
==>>Pascal Case: MyVariableName = "John"
__________________________
==>>Snake Case: my_variable_name = "John"
_______________________________________________________________________________________________________________________________________________________________________
Python Data Types:
-------------------
Built-in Data Types:-
=====================
Text Type: 	str
Numeric Types: 	int, float, complex
Sequence Types: list, tuple, range
Mapping Type: 	dict
Set Types: 	set, frozenset
Boolean Type: 	bool
Binary Types: 	bytes, bytearray, memoryview

You can get the data type of any object by using the type() function:
x = 5
print(type(x))
_______________________
Python String Methods:-
-----------------------
https://www.w3schools.com/python/python_ref_string.asp
--------------------------------------------------------
Python - Format - Strings:-
===========================
The format() method takes unlimited number of arguments, and are placed into the respective placeholders:

quantity = 3
itemno = 567
price = 49.95
myorder = "I want {} pieces of item {} for {} dollars."
print(myorder.format(quantity, itemno, price))

_______________________________________________________________________________________________________________________________________________________________________
Python Operators:
-----------------
Python Arithmetic Operators:-
=============================
Operator 	Name 	Example
+ 	Addition 	x + y 	
- 	Subtraction 	x - y 	
* 	Multiplication 	x * y 	
/ 	Division 	x / y 	
% 	Modulus 	x % y 	
** 	Exponentiation 	x ** y 	
// 	Floor division 	x // y

Python Assignment Operators:-
===============================
Operator 	Example 	Same As 
    = 		x = 5 		x = 5 	
    += 		x += 3 		x = x + 3 	
    -= 		x -= 3 		x = x - 3 	
    *= 		x *= 3 		x = x * 3 	
    /= 		x /= 3 		x = x / 3 	
    %= 		x %= 3 		x = x % 3 	
   //= 		x //= 3 	x = x // 3 	
   **= 		x **= 3 	x = x ** 3 	
   &= 		x &= 3 		x = x & 3 	
   |= 		x |= 3 		x = x | 3 	
   ^= 		x ^= 3 		x = x ^ 3 	
   >>= 		x >>= 3 	x = x >> 3 	
   <<= 		x <<= 3 	x = x << 3

Python Comparison Operators:-
=============================
Operator 	Name 			Example 
    == 		Equal 			x == y 	
    != 		Not equal 		x != y 	
    > 		Greater than 		x > y 	
    < 		Less than 		x < y 	
    >= 		Greater than or equal to x >= y 	
    <= 		Less than or equal to 	x <= y

Python Logical Operators:-
==========================
Operator 	Description 						Example 	
  and  		Returns True if both statements are true 		x < 5 and  x < 10 	
  or 		Returns True if one of the statements is true 		x < 5 or x < 4 	
  not 		Reverse the result, returns False if the result is true not(x < 5 and x < 10)

Python Identity Operators:-
===========================
Operator 	Description 						Example 
  is  		Returns True if both variables are the same object 	x is y 	
  is not 	Returns True if both variables are not the same object 	x is not y

Python Membership Operators:-
=============================
Operator 	Description 										Example 	
  in  		Returns True if a sequence with the specified value is present in the object 		x in y 	
  not in 	Returns True if a sequence with the specified value is not present in the object 	x not in y

_______________________________________________________________________________________________________________________________________________________________________
Python Lists:
-------------
List:-
=====
thislist = ["apple", "banana", "cherry"]
print(thislist)

List Length:-
=============
To determine how many items a list has, use the len() function:
thislist = ["apple", "banana", "cherry"]
print(len(thislist))

List Items - Data Types:-
=========================
==>>String, int and boolean data types:
	list1 = ["apple", "banana", "cherry"]
	list2 = [1, 5, 7, 9, 3]
	list3 = [True, False, False]

==>>A list with strings, integers and boolean values:
	list1 = ["abc", 34, True, 40, "male"]
______
type()
======
From Python's perspective, lists are defined as objects with the data type 'list':
	mylist = ["apple", "banana", "cherry"]
	print(type(mylist))
_______________________
The list() Constructor:-
=======================
==>>It is also possible to use the list() constructor when creating a new list.
	Using the list() constructor to make a List:
		thislist = list(("apple", "banana", "cherry")) # note the double round-brackets
		print(thislist)

__________________
Access List Items:-
===================
==>>List items are indexed and you can access them by referring to the index number:
	thislist = ["apple", "banana", "cherry"]
	print(thislist[1])

==>>Negative indexing means start from the end
	-1 refers to the last item, -2 refers to the second last item etc.
thislist = ["apple", "banana", "cherry"]
print(thislist[-1])
_________________
Range of Indexes:-
==================
==>>You can specify a range of indexes by specifying where to start and where to end the range.
thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[2:5])

__________________
Change List Items:-
==================
==>>To change the value of a specific item, refer to the index number:
thislist = ["apple", "banana", "cherry"]
thislist[1] = "blackcurrant"
print(thislist)
______________________________
Change a Range of Item Values:-
==============================
To change the value of items within a specific range, define a list with the new values, and refer to the range of index numbers where you want to insert the new values:
	thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]
	thislist[1:3] = ["blackcurrant", "watermelon"]
	print(thislist)
_____________
Insert Items:-
=============
To insert a new list item, without replacing any of the existing values, we can use the insert() method.
	thislist = ["apple", "banana", "cherry"]
	thislist.insert(2, "watermelon")
	print(thislist)
_____________
Append Items:-
=============
To add an item to the end of the list, use the append() method:
	thislist = ["apple", "banana", "cherry"]
	thislist.append("orange")
	print(thislist)
____________
Extend List:-
============
To append elements from another list to the current list, use the extend() method.
	thislist = ["apple", "banana", "cherry"]
	tropical = ["mango", "pineapple", "papaya"]
	thislist.extend(tropical)
	print(thislist)
_________________
Add Any Iterable:-
=================
The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).
	thislist = ["apple", "banana", "cherry"]
	thistuple = ("kiwi", "orange")
	thislist.extend(thistuple)
	print(thislist)
______________________
Remove Specified Item:-
======================
The remove() method removes the specified item.
	thislist = ["apple", "banana", "cherry"]
	thislist.remove("banana")
	print(thislist)
_______________________
Remove Specified Index:-
=======================
The pop() method removes the specified index.
	thislist = ["apple", "banana", "cherry"]
	thislist.pop(1)
	print(thislist)
===>>>If you do not specify the index, the pop() method removes the last item.

==>>The del keyword also removes the specified index:
	thislist = ["apple", "banana", "cherry"]
	del thislist[0]
	print(thislist)
==>>The del keyword can also delete the list completely.
	thislist = ["apple", "banana", "cherry"]
	del thislist
_______________
Clear the List:-
===============
The clear() method empties the list.The list still remains, but it has no content.
	thislist = ["apple", "banana", "cherry"]
	thislist.clear()
	print(thislist)
____________________
Loop Through a List:-
====================
You can loop through the list items by using a for loop:
	thislist = ["apple", "banana", "cherry"]
	for x in thislist:
	  print(x) 
_______________________________
Loop Through the Index Numbers:-
===============================
You can also loop through the list items by referring to their index number.
Use the range() and len() functions to create a suitable iterable.
	thislist = ["apple", "banana", "cherry"]
	for i in range(len(thislist)):
	  print(thislist[i]) 

___________________
Using a While Loop:-
===================
Use the len() function to determine the length of the list, then start at 0 and loop your way through the list items by refering to their indexes.
	thislist = ["apple", "banana", "cherry"]
	i = 0
	while i < len(thislist):
	  print(thislist[i])
	  i = i + 1
_________________________________
Looping Using List Comprehension:-
=================================
List Comprehension offers the shortest syntax for looping through lists:
	thislist = ["apple", "banana", "cherry"]
	[print(x) for x in thislist] 
____________________________
Sort List Alphanumerically:-
============================
List objects have a sort() method that will sort the list alphanumerically, ascending, by default:
	thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
	thislist.sort()
	print(thislist)

________________
Sort Descending:-
================
To sort descending, use the keyword argument reverse = True:
	thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
	thislist.sort(reverse = True)
	print(thislist)
________________________
Customize Sort Function:-
========================
You can also customize your own function by using the keyword argument key = function.
The function will return a number that will be used to sort the list (the lowest number first):
	def myfunc(n):
	  return abs(n - 50)

	thislist = [100, 50, 65, 82, 23]
	thislist.sort(key = myfunc)
	print(thislist)
______________________
Case Insensitive Sort:-
======================
By default the sort() method is case sensitive, resulting in all capital letters being sorted before lower case letters:
	thislist = ["banana", "Orange", "Kiwi", "cherry"]
	thislist.sort()
	print(thislist)

==>>Luckily we can use built-in functions as key functions when sorting a list.
So if you want a case-insensitive sort function, use str.lower as a key function:
	thislist = ["banana", "Orange", "Kiwi", "cherry"]
	thislist.sort(key = str.lower)
	print(thislist)
______________
Reverse Order:-
==============
The reverse() method reverses the current sorting order of the elements.
	thislist = ["banana", "Orange", "Kiwi", "cherry"]
	thislist.reverse()
	print(thislist)
____________
Copy a List:-
============
You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, and changes made in list1 will automatically also be made in list2.
There are ways to make a copy, one way is to use the built-in List method copy().
	thislist = ["apple", "banana", "cherry"]
	mylist = thislist.copy()
	print(mylist)

==>>Another way to make a copy is to use the built-in method list().
	thislist = ["apple", "banana", "cherry"]
	mylist = list(thislist)
	print(mylist)
_______________
Join Two Lists:-
===============
There are several ways to join, or concatenate, two or more lists in Python.
One of the easiest ways are by using the + operator.
	list1 = ["a", "b", "c"]
	list2 = [1, 2, 3]
	list3 = list1 + list2
	print(list3) 

==>>Another way to join two lists is by appending all the items from list2 into list1, one by one:
	list1 = ["a", "b" , "c"]
	list2 = [1, 2, 3]
	for x in list2:
	  list1.append(x)
	print(list1) 

==>Or you can use the extend() method, which purpose is to add elements from one list to another list:
	list1 = ["a", "b" , "c"]
	list2 = [1, 2, 3]
	list1.extend(list2)
	print(list1) 
_____________
List Methods:-
=============
Python has a set of built-in methods that you can use on lists.
	Method 		Description
	append()	Adds an element at the end of the list
	clear()		Removes all the elements from the list
	copy()		Returns a copy of the list
	count()		Returns the number of elements with the specified value
	extend()	Add the elements of a list (or any iterable), to the end of the current list
	index()		Returns the index of the first element with the specified value
	insert()	Adds an element at the specified position
	pop()		Removes the element at the specified position
	remove()	Removes the item with the specified value
	reverse()	Reverses the order of the list
	sort()		Sorts the list

_______________________________________________________________________________________________________________________________________________________________________
Python If ... Else
-------------------

_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________

























